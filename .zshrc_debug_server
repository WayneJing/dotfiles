# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/root/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="ys"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git themes zsh-syntax-highlighting z cp extract command-not-found sudo colored-man-pages zsh_reload)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export JFROG_CLI_OFFER_CONFIG=false
#export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2> /dev/null | head -500'"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --preview "[[ $(file --mime {}) =~ binary  ]] && echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500"'
export FZF_COMPLETION_TRIGGER='\'
export FZF_PREVIEW_COMMAND='[[ $(file --mime {}) =~ binary  ]] && echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500'

export TERM=screen-256color
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
killtestvm() {

    vm=$1
    vm_list=$(virsh list --all)
    lines=$(echo $vm_list | wc -l)
    real_list=$(echo $vm_list | tail -n $(expr $lines - 2))
    if [ ! -n "$1"   ]; then

        vm=$(echo $real_list | fzf | awk -F" " '{print $2}')

        virsh destroy $vm
    elif [ 0 -eq `echo $1 | grep -cEi "[a-zA-Z]+"` ]; then
        for i in {1..$1};
        do
            vm=$(echo $real_list | fzf -q "vatstest '-$(echo $(printf "%02d" $i))" -1| awk -F" " '{print $2}')
            virsh destroy $vm
        done
    else
        vm=$(echo $real_list | fzf -q "$1" | awk -F" " '{print $2}')
        virsh destroy $vm
    fi
}

launchtestvm(){

    vm=$1
    vm_list=$(virsh list --all)
    lines=$(echo $vm_list | wc -l)
    real_list=$(echo $vm_list | tail -n $(expr $lines - 2))
    if [ ! -n "$1"   ]; then

        vm=$(echo $real_list | fzf | awk -F" " '{print $2}')

        virsh start $vm
    elif [ 0 -eq `echo $1 | grep -cEi "[a-zA-Z]+"` ]; then
        for i in {1..$1};
        do
            vm=$(echo $real_list | fzf -q "vatstest '-$(echo $(printf "%02d" $i))" -1| awk -F" " '{print $2}')
            virsh start $vm
        done
    else
        vm=$(echo $real_list | fzf -q "$1" | awk -F" " '{print $2}')
        virsh start $vm
    fi
}

get_vm_ip(){

    vm=$1
    vm_list=$(virsh list )
    lines=$(echo $vm_list | wc -l)
    real_list=$(echo $vm_list | tail -n $(expr $lines - 2))
    if [ ! -n "$1" ];then
        vm=$(echo $real_list | fzf | awk -F" " '{print $2}')

    elif [ 0 -eq `echo $1 | grep -cEi "[a-zA-Z]+"`  ]; then


        vm=$(echo $real_list | fzf -q "vatstest '-$(echo $(printf "%02d" $1))" -1 | awk -F" " '{print $2}')
        # ip=$(arp -a | grep -o ".*$mac" | head -n 1 | grep -o "(.*)" | grep -o "[^()]*")
    else
        vm=$(echo $real_list | fzf -q "$1" | awk -F" " '{print $2}')
    fi
    if [ ! -n "$vm" ]; then
        echo error match empty vm name
        return -1
    fi
    mac=""
    while [ ! -n "$mac" ]
    do
        sleep 1

        mac=$(virsh dumpxml --domain $vm | grep -io "mac address='.*'" | awk -F"'" '{print $2}' )
        echo mac of $vm is $mac
    done
    ip=""
    while [ ! -n "$ip" ]
    do
        sleep 1
        ip=$(arp -a | grep -o ".*$mac" | grep -o "(.*)" | grep -o "[^()]*")
    done
    echo vm ip:$ip
    return $ip
}
vmconnect(){
    ip=$(get_vm_ip $1)
    ssh-keygen -f "/root/.ssh/known_hosts" -R "$ip"
    sshpass -p amd1234 ssh -o StrictHostKeyChecking=no root@$ip $2
}
fix_corrupt_history(){
    mv ~/.zsh_history ~/.zsh_history_bad

    strings ~/.zsh_history_bad > ~/.zsh_history

    fc -R ~/.zsh_history
}
fix_corrupt_history
export PATH=$PATH:/snap/bin:/usr/local/share
source ~/.passwdrc
stest(){
    realpath $1
    test_case_list=$($1 &)
    echo $test_case_list | fzf --height 40% > selected
    test_case=$(cat selected | awk -F":" '{print $1}')
    timestamp=$(date +%s)
    echo ": $timestamp:0;$1 $test_case" >> ~/.zsh_history
    $1 $test_case
}

sync_artifactory_drop(){
    wget --user=reader --password="Amd12345" -r "http://cloud-gpu-artifactory:8082/artifactory/$1" -P "/home/drop/" --no-parent --reject=html -nH --level=inf
    rm -rf $(fd index.html /home/drop)
    #jfrog rt dl --url="http://10.67.85.182:8082/artifactory" --user="jingwech" --password="$ACCOUNT_PW" --recursive=true "$1(*)" "/home/drop/{1}"

}

change_kernel(){
    uname -r
    kernel_list=$(cat /boot/grub/grub.cfg | grep -i "menuentry_id_option .*" | grep -v simple | grep -io "menuentry_id_option [^{]*"| awk -F" " '{print $2}' |awk -F"'" '{print $2}')
    valid_kernel=$(echo $kernel_list| grep advanced)
    arr=()
    while read -r line; do
        arr+=("$line\n")
    done <<< $valid_kernel
    if [ ! -n "$1"  ]; then

        selected=$(echo ${arr[@]:1}| awk '$1=$1' | fzf )
    else
        selected=$(echo ${arr[@]:1}| awk '$1=$1' | fzf -q "$1")
    fi

    echo $selected
    if [ ! -n "$selected" ]; then
        echo no param entered
        return -1
    fi
    num=$(expr $(echo $kernel_list | grep $selected -n | awk -F":" '{print $1}') - 2)
    str="1>$num"
    echo $str
    default=$(cat /etc/default/grub | grep "GRUB_DEFAULT" | awk -F"=" '{print $2}' | awk -F'"' '{print $2}')
    echo $default
    sed -ir "s/$default/$str/g" /etc/default/grub
    update-grub


}

pci_link(){
    operation_list="down\nup"
    opetation=$(echo $operation_list|fzf)

    if [ "down" = $opetation ]; then
        bus_id=$(lspci | grep ATI | grep Display | fzf | awk -F' ' '{print $1}')
        echo 1 > /sys/bus/pci/devices/0000:$bus_id/remove
    else
        echo 1 > /sys/bus/pci/devices/0000:00:01.0/rescan
    fi
    lspci | grep ATI
}

sync_file(){
    if [ ! -n "$3" ]; then
        rsync -Pa -e 'sshpass -p root ssh -l root' $1 $2
    else
        rsync -Pa -e "sshpass -p $3 ssh -l root" $1 $2
}

sync_file_to_vm(){
    ip=$(get_vm_ip)
    sync_file $1 $ip:$2 'amd1234'
}

sync_file_from_vm(){
    ip=$(get_vm_ip)
    sync_file $ip:$1 $2 'amd1234'
}
bindkey "\e[8~" end-of-line
bindkey "\e[7~" beginning-of-line
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line
