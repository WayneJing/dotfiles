# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="wayne"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git themes zsh-syntax-highlighting z cp extract command-not-found sudo colored-man-pages)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias bat="batcat"
alias fd="fdfind"
export JFROG_CLI_OFFER_CONFIG=false
#export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2> /dev/null | head -500'"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --preview "[[ $(file --mime {}) =~ binary  ]] && echo {} is a binary file || (bat --color=always {} || highlight -O ansi -l {} || bat {}) 2> /dev/null | head -500"'
export FZF_COMPLETION_TRIGGER='\'
export FZF_PREVIEW_COMMAND='[[ $(file --mime {}) =~ binary  ]] && echo {} is a binary file || (bat --color=always {} || highlight -O ansi -l {} || bat {}) 2> /dev/null | head -500'

export TERM=screen-256color
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
unalias z
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}

fix_corrupt_history(){
    mv ~/.zsh_history ~/.zsh_history_bad

    strings ~/.zsh_history_bad > ~/.zsh_history

    fc -R ~/.zsh_history
}
fix_corrupt_history
export PATH=$PATH:/snap/bin:/usr/local/share
stest(){
    realpath $1
    test_case_list=$($1 &)
    echo $test_case_list | grep -oE "^[0-9]*:.*"| fzy > selected
    test_case=$(bat selected | awk -F":" '{print $1}')
    timestamp=$(date +%s)
    echo ": $timestamp:0;$1 $test_case" >> ~/.zsh_history
    $1 $test_case
}

sync_artifactory_drop(){
    start=$(date)
    echo "Crawling all files in artifactory start from $start"
    wget --user=reader --password="Amd12345" -r "http://cloud-gpu-artifactory:8082/artifactory/$1" -P "/home/drop/" --no-parent --spider -nv --output-file="/tmp/spider.log" -nH --level=inf
    bat /tmp/spider.log | grep -oE "http[^ ]+" > /tmp/files.log
    sed -ir "s/http:\/\/cloud-gpu-artifactory:8082\/robots.txt.*//g" /tmp/files.log
    sed -ir "s/http:\/\/cloud-gpu-artifactory:8082\/artifactory\///g" /tmp/files.log

    file_content="/tmp/files.log" # get filename from command line argument
    prefix="http://cloud-gpu-artifactory:8082/artifactory/"
    output_folder="/home/drop/artifactory/"
    thread_limit=6

    while read -r line
    do
        if [ "$line" ] # skip blank lines
        then
            if [[ "$line" =~ \/$ ]] # line contains a URL, download file
            then
                echo "Directory: '$line'"
            else # line contains a directory name, create directory if not already present
                echo "Url: '$prefix$line'"
                currdir=$(dirname "$output_folder$line")
                while [ "$thread_limit" -lt "$(ps aux | grep aria2c -c)" ];
                do
                    sleep 1
                done
                aria2c --http-user=reader --http-passwd=Amd12345 --file-allocation=none -c -x 10 -s 10 -d "$currdir" "$prefix$line"&
            fi
        fi
    done < "$file_content"

    while [ "1" -ne "$(ps aux | grep aria2c -c)" ];
    do
        sleep 1
    done
    rm /tmp/spider.log /tmp/files.log
    echo download finish! $start --- $(date)
    echo please find drop in $output_folder$1
    #jfrog rt dl --url="http://10.67.85.182:8082/artifactory" --user="jingwech" --password="$ACCOUNT_PW" --recursive=true "$1(*)" "/home/drop/{1}"

}

change_kernel(){
    uname -r
    kernel_list=$(bat /boot/grub/grub.cfg | grep -i "menuentry_id_option .*" | grep -v simple | grep -io "menuentry_id_option [^{]*"| awk -F" " '{print $2}' |awk -F"'" '{print $2}')
    valid_kernel=$(echo $kernel_list| grep advanced)
    arr=()
    while read -r line; do
        arr+=("$line\n")
    done <<< $valid_kernel
    if [ ! -n "$1"  ]; then

        selected=$(echo ${arr[@]:1}| awk '$1=$1' | fzy )
    else
        selected=$(echo ${arr[@]:1}| awk '$1=$1' | fzy -q "$1")
    fi

    echo $selected
    if [ ! -n "$selected" ]; then
        echo no param entered
        return -1
    fi
    num=$(expr $(echo $kernel_list | grep $selected -n | awk -F":" '{print $1}') - 2)
    str="1>$num"
    echo $str
    default=$(bat /etc/default/grub | grep "GRUB_DEFAULT" | awk -F"=" '{print $2}' | awk -F'"' '{print $2}')
    echo $default
    sed -ir "s/$default/$str/g" /etc/default/grub
    update-grub


}

pci_link(){
    operation_list="down\nup"
    opetation=$(echo $operation_list|fzy)

    if [ "down" = $opetation ]; then
        bus_id=$(lspci | grep ATI | grep Display | fzy | awk -F' ' '{print $1}')
        echo 1 > /sys/bus/pci/devices/0000:$bus_id/remove
    else
        echo 1 > /sys/bus/pci/rescan
    fi
    lspci | grep ATI
}

export DOTFILE_PATH="$HOME/dotfiles"
get_latest_rc() {
    original_path=$(pwd)
    cd $DOTFILE_PATH
    old_commit=$(git log --oneline | head -n 1 | awk -F " " '{print $1}')
    git clean -f -d -x
    git pull
    git submodule foreach git pull origin jingwen
    new_commit=$(git log --oneline | head -n 1 | awk -F " " '{print $1}')
    if [ "$old_commit" != "$new_commit" ]; then
        omz reload
    fi
    cd $original_path
}

update_dkms()
{
    dkms_version=$(dpkg -L amdgpu-dkms | grep -E "src.*amdgpu" | head -1 | awk -F"-" '{print $2"-"$3}')
    dkms remove  amdgpu/$dkms_version --all; dkms install  amdgpu/$dkms_version -k `uname -r`
}
update-vats(){    
    sshpass -p root ssh -o StrictHostKeyChecking=no root@10.67.245.255 "cd /share/vats2;git pull"                                                                                                                                                             
    rsync -Pa /mnt/share/vats2/vats /home/drop/common_drop/    
} 
bindkey "\e[8~" end-of-line
bindkey "\e[7~" beginning-of-line
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line

autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit
completion_keyword=$(ls /etc/bash_completion.d/*)
while read -r key;
do
    source $key
done <<< $completion_keyword
